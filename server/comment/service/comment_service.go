// Code generated by hertz generator.

package service

import (
	"context"
	"douyin-user/idl/douyin_comment/kitex_gen/comment"
	"douyin-user/server/comment/pack"

	"douyin-user/server/comment/dal/db"
)

// Action .
// @router /comment/action/ [POST]
func Action(ctx context.Context, req *comment.CommentRequest) (*comment.CommentResponse, error) {
	var _ error
	//var req comment.CommentRequest
	//_ = c.BindAndValidate(&req)
	//if err != nil {
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return nil, err
	//}
	UserId := req.UserId
	//if UserId <= 0 {
	//	comment2.SendResponse(c, errno.UserIdErr, nil)
	//	return
	//}
	VideoId := req.VideoId
	//if VideoId <= 0 {
	//	comment2.SendResponse(c, errno.VideoErr, nil)
	//	return
	//}
	ActionType := req.ActionType

	CommentId := req.CommentId
	//if ActionType != 1 && ActionType != 2 {
	//	comment2.SendResponse(c, errno.ActionTypeErr, nil)
	//	return
	//}
	if ActionType == 1 {
		//发布评论
		CommentTextErr := req.CommentText
		if len(CommentTextErr) == 0 {
			//comment2.SendResponse(req, errno.CommentTextErr, nil)
			//return
		}
		if len(CommentTextErr) > 100 {
			//comment2.SendResponse(req, errno.CommentTextTooLongErr, nil)
			//return
		}
		//todo:对video_id进行校验，检查是否合法
		commentModel := &db.Comment{
			VideoId: VideoId,
			Content: CommentTextErr,
			UserId:  UserId,
			Status:  1,
		}

		_ = db.CreateComment(ctx, []*db.Comment{commentModel})
		//if err != nil {
		//	comment2.SendResponse(c, err, nil)
		//	//return
		//}
		commentQuery, err := db.QueryComment(ctx, int64(commentModel.ID))
		//if err != nil {
		//	comment2.SendResponse(c, error, nil)
		//	//return
		//}
		c2 := pack.Comment(commentQuery, ctx)

		if err != nil {
			return nil, err
		}
		//c.JSON(consts.StatusOK, comment.CommentResponse{
		//	StatusCode: 0,
		//	StatusMsg:  "成功",
		//	Comment:    c2,
		//})
		ret := &comment.CommentResponse{
			StatusCode: 0,
			StatusMsg:  "成功",
			Comment:    c2,
		}
		return ret, err
	} else {
		err := db.DeleteComment(ctx, CommentId, UserId, VideoId)
		if err != nil {
			//删除评论
			ret := &comment.CommentResponse{
				StatusCode: -1,
				StatusMsg:  "删除失败",
				Comment:    nil,
			}
			return ret, err
		}
		//删除评论
		ret := &comment.CommentResponse{
			StatusCode: 0,
			StatusMsg:  "删除成功",
			Comment:    nil,
		}
		//resp := new(comment.CommentResponse)
		//req.JSON(consts.StatusOK, resp)
		return ret, nil
	}

}

// List .
// @router /comment/list/ [GET]
func List(ctx context.Context, c *comment.CommentListRequest) (*comment.CommentListResponse, error) {
	comments, err := db.QueryComments(ctx, c.VideoId)
	if err != nil {
		ret := &comment.CommentListResponse{
			StatusCode:  0,
			StatusMsg:   "查询失败",
			CommentList: nil,
		}
		return ret, nil
	}
	commentList := pack.Comments(comments, ctx)
	ret := &comment.CommentListResponse{
		StatusCode:  0,
		StatusMsg:   "查询成功",
		CommentList: commentList,
	}
	return ret, nil
}
